<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.core.mapper.TeacherMapper">
    
    <resultMap type="Teacher" id="TeacherResult">
        <result property="teaId"    column="tea_id"    />
        <result property="teaName"    column="tea_name"    />
        <result property="teaPassword"    column="tea_password"    />
    </resultMap>

    <resultMap id="TeacherStuToTeaResult" type="Teacher" extends="TeacherResult">
        <collection property="stuToTeaList" notNullColumn="sub_stu_id" javaType="java.util.List" resultMap="StuToTeaResult" />
    </resultMap>

    <resultMap type="StuToTea" id="StuToTeaResult">
        <result property="stuId"    column="sub_stu_id"    />
        <result property="teaId"    column="sub_tea_id"    />
    </resultMap>

    <sql id="selectTeacherVo">
        select tea_id, tea_name, tea_password from teacher
    </sql>

    <select id="selectTeacherList" parameterType="Teacher" resultMap="TeacherResult">
        <include refid="selectTeacherVo"/>
        <where>  
            <if test="teaName != null  and teaName != ''"> and tea_name like concat('%', #{teaName}, '%')</if>
            <if test="teaPassword != null  and teaPassword != ''"> and tea_password = #{teaPassword}</if>
        </where>
    </select>
    
    <select id="selectTeacherByTeaId" parameterType="Long" resultMap="TeacherStuToTeaResult">
        select a.tea_id, a.tea_name, a.tea_password,
 b.stu_id as sub_stu_id, b.tea_id as sub_tea_id
        from teacher a
        left join stu_to_tea b on b.tea_id = a.tea_id
        where a.tea_id = #{teaId}
    </select>
        
    <insert id="insertTeacher" parameterType="Teacher" useGeneratedKeys="true" keyProperty="teaId">
        insert into teacher
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="teaName != null">tea_name,</if>
            <if test="teaPassword != null">tea_password,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="teaName != null">#{teaName},</if>
            <if test="teaPassword != null">#{teaPassword},</if>
         </trim>
    </insert>

    <update id="updateTeacher" parameterType="Teacher">
        update teacher
        <trim prefix="SET" suffixOverrides=",">
            <if test="teaName != null">tea_name = #{teaName},</if>
            <if test="teaPassword != null">tea_password = #{teaPassword},</if>
        </trim>
        where tea_id = #{teaId}
    </update>

    <delete id="deleteTeacherByTeaId" parameterType="Long">
        delete from teacher where tea_id = #{teaId}
    </delete>

    <delete id="deleteTeacherByTeaIds" parameterType="String">
        delete from teacher where tea_id in 
        <foreach item="teaId" collection="array" open="(" separator="," close=")">
            #{teaId}
        </foreach>
    </delete>
    
    <delete id="deleteStuToTeaByTeaIds" parameterType="String">
        delete from stu_to_tea where tea_id in 
        <foreach item="teaId" collection="array" open="(" separator="," close=")">
            #{teaId}
        </foreach>
    </delete>

    <delete id="deleteStuToTeaByTeaId" parameterType="Long">
        delete from stu_to_tea where tea_id = #{teaId}
    </delete>

    <insert id="batchStuToTea">
        insert into stu_to_tea( stu_id, tea_id) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.stuId}, #{item.teaId})
        </foreach>
    </insert>
</mapper>